
Atmel Day 01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000016c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a9  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000008ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000214  00000000  00000000  00000ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036f  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000014af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile int toggle = 0;

int main(void)
{
    EICRA |= 0B00001100; // setting the interrupt to trigger on the rising edge in the INT1
  90:	e9 e6       	ldi	r30, 0x69	; 105
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8c 60       	ori	r24, 0x0C	; 12
  98:	80 83       	st	Z, r24
    EIMSK |= 0B00000010; // enabling the interrupt for INT1
  9a:	e9 9a       	sbi	0x1d, 1	; 29
    sei();               // enabling the global interrupt
  9c:	78 94       	sei

    DDRB |= 0B11111110; // setting the DDRB to output for the LED
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	8e 6f       	ori	r24, 0xFE	; 254
  a2:	84 b9       	out	0x04, r24	; 4
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <main+0x14>

000000a6 <__vector_2>:
    }
}

// ISR for the INT1
ISR(INT1_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
    if (toggle)
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c0:	89 2b       	or	r24, r25
  c2:	11 f0       	breq	.+4      	; 0xc8 <__vector_2+0x22>
    {
        PORTB |= 0B00100000;
  c4:	2d 9a       	sbi	0x05, 5	; 5
  c6:	01 c0       	rjmp	.+2      	; 0xca <__vector_2+0x24>
    }
    else
    {
        PORTB &= 0B11011111;
  c8:	2d 98       	cbi	0x05, 5	; 5
        
    }
	toggle = 1 - toggle;
  ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  ce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	82 1b       	sub	r24, r18
  d8:	93 0b       	sbc	r25, r19
  da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	3f 91       	pop	r19
  e8:	2f 91       	pop	r18
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
